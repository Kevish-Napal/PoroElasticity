// Coefficients of the VarUP problem
complex a,b,c,d;
a=rhof/rhom;
b=om^2*(rho-rhof^2/rhom);
c=om^2*rhom/M;
d=-om^2*(rhof-beta*rhom);

//a=1;b=1;c=1;d=1;
cout << "---------- VarUP Coefficients ----------" << endl;
cout << "a = " << a << ", b = " << b << endl << "c = " << c << ", d = " << d << endl;
cout << "|c|=" << abs(c) << " |d|=" << abs(d) << endl;



// solutions u and p
fespace Vh(Th,P1);
Vh PlotTemp;
fespace Xh(Th,[P1,P1,P1,P1]);
Xh<complex> [ux, uy, uz, p], [uux, uuy, uuz, pp];

// Allocation of Source terms
Vh f1x = 0;
Vh f1y = 0;
Vh f1z = 0;
Vh f2x = 0;
Vh f2y = 0;
Vh f2z = 0;

Vh<complex> F1x,F1y,F1z;
Vh F2;

real[int] S0(3);// = -.5*[SensorDepth,SensorWidth,SensorHeight];
real DiracAmplitude = 10;
real DiracMagnitude = 100;
f1z = DiracMagnitude*DiracAmplitude*Dirac3(DiracAmplitude*((x-S0(0))^2+(y-S0(1))^2+(z-S0(2))^2));
F1z = f1z-rhof/rhom*f2z;

plot(f1z,wait=1);

// Problem
varf VarUP([ux,uy,uz,p],[uux,uuy,uuz,pp])
  = int3d(Th)(
    // Equation for u
      lambda*div(ux,uy,uz)*conj(div(uux,uuy,uuz))
    + 2.*mu*(epsilon(uux,uuy,uuz)'*epsilon(ux,uy,uz))
    - beta*p*conj(div(uux,uuy,uuz))
    - a*(dx(p)*conj(uux)+dy(p)*conj(uuy)+dz(p)*conj(uuz))
    - b*(ux*conj(uux)+uy*conj(uuy)+uz*conj(uuz))
  // Equation for p
    + dx(p)*conj(dx(pp))+dy(p)*conj(dy(pp))+dz(p)*conj(dz(pp))
    - c*p*conj(pp)
    - d*div(ux,uy,uz)*conj(pp)
    )
    + on(ExtCond,cracklabel,p=0)
    ;
matrix<complex> A = VarUP(Xh,Xh);//precise solver here.


varf SourceTerm([ux,uy,uz,p],[uux,uuy,uuz,pp])
  = int3d(Th)(F1x*conj(uux)+F1y*conj(uuy)+F1z*conj(uuz) - F2*conj(pp))
  + on(ExtCond,cracklabel,p=0)
  ;
complex[int] Y = SourceTerm(0,Xh);
complex[int] X(Xh.ndof);


//
// complex[int] Temp(Xh.ndof);
// func real Error(bool RelOrNot){
//   Temp = A*X;
//   Temp = Temp - Y;
//   real error =sqrt(real(Temp'*Temp));
//   if(RelOrNot==1){
//     Temp = Y;
//     error=error/sqrt(real(Temp'*Temp));
//   }
//   return error;
// }


real timer = clock();
cout << "-------- first GMRES --------" << endl;
X = A^-1 * Y;
cout << "VarUP, time/Emitter:" << clock() - timer << endl;
//ux[]=X;

// PlotTemp = real(uz);
// plot(PlotTemp,wait=1);


exec("mkdir Plots");
      savemesh(Th,"Plots/Poro3d.mesh");
      ffSaveVh(Th,Vh,"Plots/Vh.txt");
      ffSaveData(f1z,"Plots/f1z.txt");
      ffSaveData(ux,"Plots/ux.txt");
      ffSaveData(uy,"Plots/uy.txt");
      ffSaveData(uz,"Plots/uz.txt");
      ffSaveData(p,"Plots/p.txt");

real[int,int] XX(Xh.ndof,2);
for(int i=0;i<Xh.ndof;i++){
  XX(i,0) = real(X(i)); XX(i,1) = imag(X(i));
}
  {
  ofstream fileoutput("X.dat");
  fileoutput << XX;
  } ;

cout << "FIN DU CODE!" << endl;
